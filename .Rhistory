samp=11/15/16
class(samp)
install.packages("dplyr")
library(ggplot2)
library(ggplot2)
library(flexdashboard)
library(knitr)
library(plotly)
install.packages("plotly")
library(dplyr)
library(plotly)
library(flexdashboard)
library(ggplot2)
library(knitr)
library(plotly)
library(dplyr)
library(ggplot)
install.packages("ggplot")
library(ggplot)
library(flexdashboard)
library(ggplot2)
library(knitr)
library(plotly)
library(dplyr)
ggplot(data=tata, aes(x=Age, y=BloodPressure))+geom_line()+geom_point()
data<-read.csv(file.choose())
data<-read.csv(file.choose())
data<-read.csv(file.choose())
View(data)
data<-read.csv(file.choose())
View(data)
head(data)
ggplot(data=tata, aes(x=Age, y=BloodPressure))+geom_line()+geom_point()
ggplot(data=data, aes(x=Age, y=BloodPressure))+geom_line()+geom_point()
View(data)
View(data)
data<-read.csv(file.choose())
head(data)
---
title: "Untitled"
---
title: "Diabetes Dashboard"
ggplot(data=data, aes(x=Age, y=BloodPressure))+geom_line()+geom_point()
library(flexdashboard)
library(ggplot2)
library(knitr)
library(plotly)
library(dplyr)
data<-read.csv(file.choose())
View(data)
head(data)
ggplot(data=data, aes(x=Age, y=BloodPressure))+geom_line()+geom_point()
data <- read.csv(file.choose())
head(data)
ggplot(data)+geom_bar(data=data, aes(x=Age), main="Title")
library(knitr)
with(data, pie(table(Age, BloodPressure)))
# Create a vector of department names
departments <- c("HR", "Finance", "Marketing", "IT", "Operations")
# Generate random performance ratings for each department
set.seed(123)  # Set seed for reproducibility
hr_ratings <- rnorm(20, mean = 3.5, sd = 0.5)
finance_ratings <- rnorm(20, mean = 4, sd = 0.5)
marketing_ratings <- rnorm(20, mean = 3.8, sd = 0.5)
it_ratings <- rnorm(20, mean = 4.2, sd = 0.5)
operations_ratings <- rnorm(20, mean = 3.6, sd = 0.5)
# Combine the ratings into a data frame
employee_data <- data.frame(
Department = rep(departments, each = 20),
Performance_Rating = c(hr_ratings, finance_ratings, marketing_ratings, it_ratings, operations_ratings)
)
# View the first few rows of the dataset
head(employee_data)
# Load the data from the CSV file
employee_data <- read.csv(file.choose())
# View the loaded dataset
print(employee_data)
# Using tapply to find the maximum performance rating for each department
# Let's assume we have performance ratings for each employee in another dataset called performance_ratings
# For demonstration purposes, I'll generate random performance ratings here
set.seed(123)  # Set seed for reproducibility
performance_ratings <- runif(nrow(employee_data), min = 3, max = 5)  # Generate random performance ratings between 3 and 5
# Adding performance ratings to the employee_data
employee_data$Performance_Rating <- performance_ratings
# Now, let's use tapply to find the maximum performance rating for each department
max_ratings <- tapply(employee_data$Performance_Rating, employee_data$Department, max)
# Convert the result to a data frame for better visualization
max_ratings_df <- data.frame(Department = names(max_ratings), Max_Performance_Rating = max_ratings)
# View the result
print(max_ratings_df)
# Total performance rating of all departments
total_performance <- sum(employee_data$Performance_Rating)
# Print the total performance rating
print(total_performance)
# Create a dataset containing exam scores for different subjects
student_scores <- data.frame(
Math = c(85, 90, 75, 80, 95),
English = c(75, 85, 90, 80, 85),
Science = c(80, 85, 70, 90, 95),
History = c(90, 80, 85, 75, 85),
Geography = c(85, 90, 75, 80, 95)
)
# Calculate the average score for each student across all subjects using apply
student_avg_scores <- apply(student_scores, 1, mean)
# Identify students with an average score above 80%
above_80_percent <- student_avg_scores > 80
# Print the students with average scores above 80%
print(student_avg_scores)
print(above_80_percent)
# Create a dataset containing exam scores for different subjects
student_scores <- data.frame(
Student_Name = c("Alice", "Bob", "Charlie", "David", "Emma"),
Math = c(85, 90, 75, 80, 95),
English = c(75, 85, 90, 80, 85),
Science = c(80, 85, 70, 90, 95),
History = c(90, 80, 85, 75, 85),
Geography = c(85, 90, 75, 80, 95)
)
# Calculate the average score for each student across all subjects using apply
student_avg_scores <- apply(student_scores[, -1], 1, mean)
# Add the average scores to the dataset
student_scores$Average_Score <- student_avg_scores
# Identify students with an average score above 80%
above_80_percent <- student_avg_scores > 80
# Print the dataset with average scores and identify students with average scores above 80%
print(student_scores)
print("Students with average scores above 80%:")
print(student_scores[above_80_percent, ])
4*7+3*8+9+3*7+4*7+10+4*8+3*7+3*8
4+3+1+3+4+1+4+3+3
(4*7+3*8+9+3*7+4*7+10+4*8+3*7+3*8)/(4+3+1+3+4+1+4+3+3)
(4*7+3*9+9+3*7+4*7+10+4*8+3*7+3*8)/(4+3+1+3+4+1+4+3+3)
(4*7+3*10+9+3*7+4*7+10+4*8+3*7+3*8)/(4+3+1+3+4+1+4+3+3)
(1)/(4+4+4+3+1+3+1+2+3)
(4*10+4*10+4*8+3*5+9+3*6+9+2*8+3*8)/(4+4+4+3+1+3+1+2+3)
(4*10+4*10+4*8+3*7+9+3*6+9+2*8+3*8)/(4+4+4+3+1+3+1+2+3)
(4*10+4*10+4*8+3*7+9+3*7+9+2*8+3*8)/(4+4+4+3+1+3+1+2+3)
(4*10+4*10+4*8+3*8+9+3*7+9+2*8+3*8)/(4+4+4+3+1+3+1+2+3)
(3*7+3*9+3*9+3*9+4*10+3*6+3*8)/(3+3+3+3+4+3+3)
---
title: "MTcars Dashboard"
```{r setup, include=FALSE}
library(flexdashboard)
summary_table <- summary(mtcars)
kable(summary_table, format = "html")
---
title: "MTcars Dashboard"
library(knitr)
library(flexdashboard)
library(knitr)
library(dplyr)
# Create a data frame with missing data
d <- data.frame(name = c("Abhi", "Bhavesh", "Chaman", "Dimri"),
age = c(7, 1, 9, 16),
ht = c(46, NA, NA, 69),
school = c("yes", "yes", "no", "no"))
# Display the data frame
print(d)
# Finding rows with NA value
rows_with_na <- d %>% filter(age>5)
print(rows_with_na)
setwd("C:/Users/ASUS/Desktop/R Programming Class")
library(lattice)
xyplot(wt ~ mpg, data = mtcars, type = c("p", "smooth"))
View(mtcars)
